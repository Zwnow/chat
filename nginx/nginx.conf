worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    resolver 127.0.0.11 valid=10s;
    include mime.types;
    default_type application/octet-stream;

    # Logging setup
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    server {
        listen 80;

        set $cors_origin "*";
        set $cors_methods "GET, POST, OPTIONS";
        set $cors_headers "*";

        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' $cors_methods always;
        add_header 'Access-Control-Allow-Headers' $cors_headers always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' $cors_methods always;
                add_header 'Access-Control-Allow-Headers' $cors_headers always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
        }

        location /stream/ {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            # Strip for preventing injection
            proxy_set_header X-User-ID "";
            proxy_set_header X-User-ID $user_id;

            # Forward the request to the API service
            proxy_pass http://chat-service:8081;
            proxy_set_header Connection keep-alive;
            proxy_buffering off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        location /api {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            if ($http_authorization = "") {
                return 401 "Authorization header required";
            }
            auth_request /validate-token;
            auth_request_set $user_id $upstream_http_x_user_id;
           
            error_page 401 = @unauthorized;

            # Strip for preventing injection
            proxy_set_header X-User-ID "";
            proxy_set_header X-User-ID $user_id;

            # Forward the request to the API service
            proxy_pass http://chat-service:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        location /login {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass http://user-service:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /register {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass http://user-service:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location = /validate-token {
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass http://user-service:8080/validate-token;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        location @unauthorized {
            return 401 "Unauthorized WebSocket connection";
        }
    }
}
